/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Clases;

import Conexiones.Conexion;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
//los paneles en las propiedad tiene que tener marcadas las casillas de closabel y iconifiable
public class agregarInventario extends javax.swing.JInternalFrame {

    int contador = 0;
    public agregarInventario() {
        initComponents();
        this.CBcategoria.removeAllItems();//remueve todos los elementos existentes en el combo box
        this.CBcategoria.addItem("SELECCIONE CATEGORIA");//agrega un elemento para dar instricciones
        try {
             ResultSet rs = null;//elemento con el que se realizan las consultas a la base de datos
            Connection con3 = null;//objeto de conexion
            Conexion conect3 = new Conexion();//objeto de nustra clase conexion
            con3 = conect3.getConnection();//revisa si la base de datos esta conectada
            Statement Sent = con3.createStatement();//crea una consulta para realizar
             rs = Sent.executeQuery("select * from categoria");//la consulra es que seleccione todo lo que se encuentra en la tabla de categorias
             while (rs.next()) {//va a recorrer cada fila de la tabla hasta que no haya mas elementos y agregara al combobox el nombre de cada categotia                
                this.CBcategoria.addItem(rs.getString("nombre"));
            }
             contador++;//el contador aumenta para saber que si hay elementos en el combobox
        } catch (Exception e) {
        }
        desabilitar();// bloque el textfile de categoria para que los usuarios no la puedan modificar ya que es una clave de la base de datos
    }
    public void desabilitar(){
    this.txtidcategoria.setEnabled(false);
    
    }
    public void limpiar(){//borra todo el texto que halla en los textfiles
        txtidcategoria.setText("");
        txtnombre.setText("");
        txtcosto.setText("");
        txtprecio.setText("");
        txtcantidad.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CBcategoria = new javax.swing.JComboBox<>();
        txtidcategoria = new javax.swing.JTextField();
        txtnombre = new javax.swing.JTextField();
        txtcosto = new javax.swing.JTextField();
        txtprecio = new javax.swing.JTextField();
        txtcantidad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setText(" CATEGORIA:");

        jLabel2.setText("NOMBRE:");

        jLabel3.setText("COSTO:");

        jLabel4.setText("PRECIO DE VENTA:");

        jLabel5.setText("CANTIDAD:");

        CBcategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBcategoriaActionPerformed(evt);
            }
        });

        txtcosto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcostoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcostoKeyTyped(evt);
            }
        });

        txtprecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtprecioKeyTyped(evt);
            }
        });

        txtcantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcantidadKeyTyped(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/interface.png"))); // NOI18N
        jButton1.setText("GUARDAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtcosto)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(CBcategoria, 0, 403, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtidcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtprecio)
                    .addComponent(txtcantidad)
                    .addComponent(txtnombre))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtidcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(CBcategoria)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtnombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtcosto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtprecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtcantidad))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(106, 106, 106))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBcategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBcategoriaActionPerformed
        CBcategoria.transferFocus();//pasa el focus al elemento siguiente
        try {
            if (this.contador>0) {//si el comobox tiene elementos entra al if
                Connection con2 = null;
                Conexion conect2 = new Conexion();
                con2 = conect2.getConnection();//objetos necesarios para hacer una consulta
                Statement st2 = con2.createStatement();//se preapara la consulta
                //la consulta dice que de la tabla categoria seleccione el elemento que tenga el mismo nuemo de id que el que selecciono el usuario
                ResultSet rs1 = st2.executeQuery("select * from categoria where id = '" + this.CBcategoria.getSelectedIndex() + "'");
                rs1.next();//se seleccione el elemento siguiente ya que la tabla empieza en 1 y el combo en 0
                this.txtidcategoria.setText(String.valueOf(rs1.getInt("id")));//se lo coloca al txtfile el valor de la id
            }
        } catch (SQLException e) {
             JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_CBcategoriaActionPerformed

    private void txtcostoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostoKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtcostoKeyPressed

    private void txtcostoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcostoKeyTyped
        // solo permite numero en el textfile de presio para evitar errores de tipo
        char c = evt.getKeyChar();
        if(c<'0'||c>'9') evt.consume();
    }//GEN-LAST:event_txtcostoKeyTyped

    private void txtprecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprecioKeyTyped
        // solo permite numero en el textfile  para evitar errores de tipo
        char c = evt.getKeyChar();
        if(c<'0'||c>'9') evt.consume();
    }//GEN-LAST:event_txtprecioKeyTyped

    private void txtcantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcantidadKeyTyped
           // solo permite numero en el textfile  para evitar errores de tipo:
        char c = evt.getKeyChar();
        if(c<'0'||c>'9') evt.consume();
    }//GEN-LAST:event_txtcantidadKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //primero valida todos los textfiles para ver si ninguno esta vacio si uno lo esta muestra el mensaje y le hace focus a ese elemento  
        if (txtidcategoria.getText().isEmpty()) {
             JOptionPane.showMessageDialog(this, "FALTA ELEGIR LA CATEGORIA", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtidcategoria.requestFocus();
        }else if (txtnombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "FALTA INGRESAR EL NOMBRE", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtnombre.requestFocus();
        }else if(txtcosto.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "FALTA INGRESAR EL COSTO", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtcosto.requestFocus();
        }else if(txtprecio.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "FALTA INGRESAR EL PRESIO", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtprecio.requestFocus();
        }else if(txtcantidad.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "FALTA INGRESAR LA CANTIDAD", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtcantidad.requestFocus();
        }else{
            //ya con todos los textfiles validados entra en el try para ser guardados en la base de datos
            try {
                Connection con = null;
                Conexion conect = new Conexion();
                con = conect.getConnection();//objetos necesarios para la conexion
                Statement st = con.createStatement();//se crea una consulta
                //la consulta es que se inserte en la tabla de inventario en los campos de id_categoria,nombre,costo,precio_venta,cantidad los siguientes valores,(el numerode ? tiene que ser igual a los campos donde se va a insertar)
                String sql = "insert into inventario (id_categoria,nombre,costo,precio_venta,cantidad) values (?,?,?,?,?)";
                PreparedStatement pst = con.prepareStatement(sql);//prepara para insertar
                pst.setString(1, txtidcategoria.getText());//se van insertanto los valores en la consulta uno por uno en su posicion corres´pondiente
                pst.setString(2, txtnombre.getText());
                pst.setString(3, txtcosto.getText());
                pst.setString(4, txtprecio.getText());
                pst.setString(5, txtcantidad.getText());
                int n = pst.executeUpdate();//ya con todos los valores se realiza la insercion si regresa un valor mayor a 0 es que salio bien
                if (n>0) {
                    JOptionPane.showMessageDialog(this, "DATOS GUARDADOS CORRECTAMENTE");
                    limpiar();//se borrar los datos que se ingresaron del form
                    
                }
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(this, "LOS DATOS NO HAN SIDO GUARDADOS CORRECTAMENTE", "Error", JOptionPane.ERROR_MESSAGE);
            } 
        
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBcategoria;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtcantidad;
    private javax.swing.JTextField txtcosto;
    private javax.swing.JTextField txtidcategoria;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JTextField txtprecio;
    // End of variables declaration//GEN-END:variables
}
